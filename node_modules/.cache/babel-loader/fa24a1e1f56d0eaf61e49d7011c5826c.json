{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\WeCanCodeIT\\\\wcci\\\\default-workspace\\\\rehab-application\\\\rehab-app-front-end-user\\\\src\\\\components\\\\Survey\\\\AddSurvey\\\\AddSurvey.js\";\nimport React, { Component } from \"react\";\nimport QuestionList from './QuestionList';\nimport QuestionChoiceList from './QuestionChoiceList';\nimport axios from \"axios\";\n\nvar AddSurvey =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddSurvey, _Component);\n\n  function AddSurvey(props) {\n    var _this;\n\n    _classCallCheck(this, AddSurvey);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddSurvey).call(this, props));\n\n    _this.setQuestionOptions = function () {\n      _this.setState({\n        questionOptions: _toConsumableArray(_this.state.questions.map(function (question) {\n          return {\n            id: question.id,\n            name: question.name\n          };\n        }))\n      });\n    };\n\n    _this.updateQuestionOptions = function (specificQuestionName) {\n      // let selectBox = document.querySelector(\".questionListChoice\")\n      // let questionId = selectBox.options[selectBox.selectedIndex].value;\n      // let questionName = selectBox.options[selectBox.selectedIndex].textContent;\n      _this.setState({\n        questionOptions: _toConsumableArray(_this.state.questionOptions.filter(function (questionOption) {\n          return questionOption.name !== specificQuestionName;\n        }))\n      });\n    };\n\n    _this.addQuestionChoiceButton = function () {\n      var selectBox = document.querySelector(\".questionListChoice\");\n      var questionId = selectBox.options[selectBox.selectedIndex].value;\n      var questionName = selectBox.options[selectBox.selectedIndex].textContent;\n      Promise.all([_this.addQuestionChoice(questionId, questionName)]).then(_this.updateQuestionOptions(questionName));\n    };\n\n    _this.addQuestionChoice = function (id, name) {\n      _this.setState({\n        questionChoices: [].concat(_toConsumableArray(_this.state.questionChoices), [{\n          id: id,\n          name: name\n        }])\n      }); // Promise.all([\n      //   // () => { id === \"add\" && this.setState({ addQuestionChecker: true }) }, \n      //   () => {this.setState({\n      //       questionChoices: [...this.state.questionChoices, {\n      //         id: id,\n      //         name: name,\n      //       }]\n      //     })\n      //     },\n      //   this.updateQuestionChoiceIds(), \n      //   this.updateQuestionOptions()]);\n      // console.log(this.state.questionChoiceIds)\n      // console.log(this.state.questionOptions)\n\n    };\n\n    _this.removeQuestionChoice = function (specificQuestionName) {\n      _this.setState({\n        questionChoices: _toConsumableArray(_this.state.questionChoices.filter(function (questionChoice) {\n          return questionChoice.name !== specificQuestionName;\n        }))\n      });\n    };\n\n    _this.addSurveyButton = function () {\n      var name = document.querySelector(\".surveyName-input\").value;\n\n      _this.props.addSurvey(name, _this.state.questionChoices);\n    };\n\n    _this.updateQuestionChoiceIds = _this.updateQuestionChoiceIds.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateQuestionOptions = _this.updateQuestionOptions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setState = _this.setState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      questions: [],\n      questionOptions: [],\n      questionChoices: [],\n      addQuestionChecker: false\n    };\n    return _this;\n  } // state = {\n  //   questions: [],\n  //   questionOptions: [],\n  //   questionChoices: [],\n  //   questionChoiceIds: [],\n  //   addQuestionChecker: false\n  // };\n\n\n  _createClass(AddSurvey, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(\"/questions\").then(function (res) {\n        return _this2.setState({\n          questions: res.data\n        });\n      }).then(function () {\n        return _this2.setQuestionOptions();\n      });\n    } // updateQuestionChoiceIds = () => {\n    //   this.setState({questionChoiceIds: [...this.state.questionChoices.map(questionChoice => {\n    //     return questionChoice.name;\n    //   })]})\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"renderContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"survey\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"addSurveyTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Add Survey\"), React.createElement(\"div\", {\n        className: \"surveyName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Survey Name:\"), React.createElement(\"input\", {\n        className: \"surveyName-input\",\n        type: \"text\",\n        placeholder: \"Survey Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"questionBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, console.log(\"choiceId \" + this.state.questionChoiceIds), console.log(\"choice \" + this.state.questionChoices), console.log(\"options \" + this.state.questionOptions), React.createElement(QuestionList, {\n        questions: this.state.questionOptions,\n        addQuestionChoice: this.addQuestionChoice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"btnContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"genericButton\",\n        onClick: function onClick() {\n          return _this3.addQuestionChoiceButton();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Add Question Choice\"))), React.createElement(QuestionChoiceList, {\n        questionChoices: this.state.questionChoices,\n        removeQuestionChoice: this.removeQuestionChoice,\n        addQuestionChecker: this.state.addQuestionChecker,\n        addQuestion: this.addQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"btnContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"genericButton\",\n        onClick: function onClick() {\n          return _this3.addSurveyButton();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Submit Survey\"))));\n    }\n  }]);\n\n  return AddSurvey;\n}(Component);\n\nexport { AddSurvey as default };","map":{"version":3,"sources":["C:\\Users\\WeCanCodeIT\\wcci\\default-workspace\\rehab-application\\rehab-app-front-end-user\\src\\components\\Survey\\AddSurvey\\AddSurvey.js"],"names":["React","Component","QuestionList","QuestionChoiceList","axios","AddSurvey","props","setQuestionOptions","setState","questionOptions","state","questions","map","question","id","name","updateQuestionOptions","specificQuestionName","filter","questionOption","addQuestionChoiceButton","selectBox","document","querySelector","questionId","options","selectedIndex","value","questionName","textContent","Promise","all","addQuestionChoice","then","questionChoices","removeQuestionChoice","questionChoice","addSurveyButton","addSurvey","updateQuestionChoiceIds","bind","addQuestionChecker","get","res","data","console","log","questionChoiceIds","addQuestion"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport QuestionList from './QuestionList';\r\nimport QuestionChoiceList from './QuestionChoiceList'\r\nimport axios from \"axios\"\r\n\r\nexport default class AddSurvey extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateQuestionChoiceIds = this.updateQuestionChoiceIds.bind(this);\r\n    this.updateQuestionOptions = this.updateQuestionOptions.bind(this);\r\n    this.setState = this.setState.bind(this);\r\n    this.state = {\r\n      questions: [],\r\n      questionOptions: [],\r\n      questionChoices: [],\r\n      addQuestionChecker: false\r\n    };\r\n  \r\n  }\r\n\r\n  // state = {\r\n  //   questions: [],\r\n  //   questionOptions: [],\r\n  //   questionChoices: [],\r\n  //   questionChoiceIds: [],\r\n  //   addQuestionChecker: false\r\n  // };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"/questions\").then(res => this.setState({ questions: res.data }))\r\n    .then(() => this.setQuestionOptions())\r\n  }\r\n\r\n  // updateQuestionChoiceIds = () => {\r\n    \r\n  //   this.setState({questionChoiceIds: [...this.state.questionChoices.map(questionChoice => {\r\n  //     return questionChoice.name;\r\n  //   })]})\r\n  // }\r\n\r\n  setQuestionOptions = () => {\r\n    this.setState({questionOptions: [...this.state.questions.map(question => {\r\n      return {id : question.id, name : question.name};\r\n    })]})\r\n  }\r\n\r\n  updateQuestionOptions = (specificQuestionName) => {\r\n    // let selectBox = document.querySelector(\".questionListChoice\")\r\n    // let questionId = selectBox.options[selectBox.selectedIndex].value;\r\n    // let questionName = selectBox.options[selectBox.selectedIndex].textContent;\r\n    this.setState({\r\n      questionOptions: [...this.state.questionOptions.filter(questionOption => questionOption.name !== specificQuestionName)]\r\n    })\r\n  }\r\n\r\n  addQuestionChoiceButton = () => {\r\n    let selectBox = document.querySelector(\".questionListChoice\")\r\n    let questionId = selectBox.options[selectBox.selectedIndex].value;\r\n    let questionName = selectBox.options[selectBox.selectedIndex].textContent;\r\n    Promise.all([this.addQuestionChoice(questionId, questionName)\r\n      ])\r\n      .then(this.updateQuestionOptions(questionName))\r\n  }\r\n\r\n  addQuestionChoice = (id, name) => {\r\n    this.setState({ questionChoices: [...this.state.questionChoices, {\r\n        id: id,\r\n        name: name,\r\n      }]\r\n    })\r\n    // Promise.all([\r\n    //   // () => { id === \"add\" && this.setState({ addQuestionChecker: true }) }, \r\n    //   () => {this.setState({\r\n    //       questionChoices: [...this.state.questionChoices, {\r\n    //         id: id,\r\n    //         name: name,\r\n    //       }]\r\n    //     })\r\n    //     },\r\n    //   this.updateQuestionChoiceIds(), \r\n    //   this.updateQuestionOptions()]);\r\n    \r\n    // console.log(this.state.questionChoiceIds)\r\n    // console.log(this.state.questionOptions)\r\n  }\r\n\r\n  removeQuestionChoice = (specificQuestionName) => {\r\n    this.setState({\r\n      questionChoices: [...this.state.questionChoices.filter(questionChoice => questionChoice.name !== specificQuestionName)]\r\n    })\r\n  }\r\n\r\n  // addQuestion = name => {\r\n  //   let newId\r\n  //   axios\r\n  //     .post(\"/questions/addQuestion\", { name})\r\n  //     .then(res => this.setState({ questions: res.data }))\r\n  //     .then(() => {axios\r\n  //     .post(\"/questions/nameToId\", { name})\r\n  //       .then(res => {newId = res.data })})\r\n  //     .then(() => {\r\n  //       console.log(newId)\r\n  //       this.setState({\r\n  //       questionChoices: [...this.state.questionChoices, {\r\n  //         id: newId,\r\n  //         name: name,\r\n  //       }],\r\n  //       addQuestionChecker: false\r\n  //      })})\r\n  // }\r\n\r\n  addSurveyButton = () => {\r\n    let name = document.querySelector(\".surveyName-input\").value\r\n    this.props.addSurvey(name, this.state.questionChoices);\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"renderContainer\">\r\n        <div className=\"survey\">\r\n          <h1 className=\"addSurveyTitle\">Add Survey</h1>\r\n          <div className=\"surveyName\">\r\n            <p>Survey Name:</p>\r\n            <input className=\"surveyName-input\" type=\"text\" placeholder=\"Survey Name\"></input>\r\n          </div>\r\n\r\n          <div className=\"questionBox\">\r\n          {console.log(\"choiceId \" + this.state.questionChoiceIds)}\r\n          {console.log(\"choice \" + this.state.questionChoices)}\r\n          {console.log(\"options \" + this.state.questionOptions)}\r\n            <QuestionList questions={this.state.questionOptions} addQuestionChoice={this.addQuestionChoice}\r\n            />\r\n            <div className=\"btnContainer\">\r\n              <button\r\n                className=\"genericButton\"\r\n                onClick={() => (this.addQuestionChoiceButton())}\r\n              >Add Question Choice\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <QuestionChoiceList questionChoices={this.state.questionChoices} removeQuestionChoice={this.removeQuestionChoice} addQuestionChecker={this.state.addQuestionChecker} addQuestion = {this.addQuestion} />\r\n\r\n          <div className=\"btnContainer\">\r\n            <button\r\n              className=\"genericButton\"\r\n              onClick={() => this.addSurveyButton()}\r\n            >Submit Survey\r\n              </button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}